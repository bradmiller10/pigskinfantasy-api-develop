import { Body, Controller, Post, Request } from '@nestjs/common';
import { FastifyRequest } from 'fastify';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
import { Public } from 'src/helpers/decorators/public.decorator';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';
import { VerifyDto } from './dto/verify.dto';
import { AuthDto } from './dto/auth.dto';
import { Users } from 'src/helpers/decorators';

/**
 * Responsible for handling Authentication across various applications
 */
@Controller('auth')
@ApiTags('auth')
export class AuthController {
  constructor(private authService: AuthService) {}
  /**
   * Will send off a one time verification code to the user if everything is valid and ready for a login
   *
   * @access Public
   * @endpoint /auth/login
   * @author jordanskomer
   * @since 0.0.1
   */
  @Public()
  @Post('login')
  async login(@Body() body: LoginDto): Promise<AuthDto> {
    return this.authService.sendOneTimeCode(body.phoneNumber);
  }
  /**
   * Used to verify the user's one time code that was generated by /auth/login. It also
   * ensure the correct user is entering the code by validating the JWT token that was passed to ensure
   * everything matches up and no foul play was inacted.
   *
   * @access Consumers
   * @endpoint /auth/verify
   * @author jordanskomer
   * @since 0.0.1
   */
  @ApiBearerAuth()
  @Users()
  @Post('verify')
  verify(@Request() req, @Body() body: VerifyDto) {
    return this.authService.validateOneTimeCode(body.code, req.user);
  }
  /**
   * Used to send a new refreshed access token. It will only return a new access token if the user's
   * refresh token has not expired (this is checked in our jwt.strategy)
   *
   * @access Users
   * @endpoint /auth/refresh
   * @author jordanskomer
   * @since 0.0.1
   */
  @ApiBearerAuth()
  @Users()
  @Post('refresh')
  refresh(@Request() req: FastifyRequest) {
    return this.authService.refreshUsersToken(req.user);
  }

  @ApiBearerAuth()
  @Post('logout')
  logout(@Request() req: FastifyRequest) {
    return this.authService.logoutUser(req.user);
  }
}
